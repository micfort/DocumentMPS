package Document.Basics.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Cell;
  private ConceptPresentation props_ICanBeReferenced;
  private ConceptPresentation props_Image;
  private ConceptPresentation props_ImageFile;
  private ConceptPresentation props_Paragraph;
  private ConceptPresentation props_Reference;
  private ConceptPresentation props_Row;
  private ConceptPresentation props_Section;
  private ConceptPresentation props_Table;
  private ConceptPresentation props_TableOfContents;
  private ConceptPresentation props_UsePackage;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Cell:
        if (props_Cell == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Cell");
          props_Cell = cpb.create();
        }
        return props_Cell;
      case LanguageConceptSwitch.ICanBeReferenced:
        if (props_ICanBeReferenced == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ICanBeReferenced = cpb.create();
        }
        return props_ICanBeReferenced;
      case LanguageConceptSwitch.Image:
        if (props_Image == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Image = cpb.create();
        }
        return props_Image;
      case LanguageConceptSwitch.ImageFile:
        if (props_ImageFile == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ImageFile = cpb.create();
        }
        return props_ImageFile;
      case LanguageConceptSwitch.Paragraph:
        if (props_Paragraph == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Paragraph");
          props_Paragraph = cpb.create();
        }
        return props_Paragraph;
      case LanguageConceptSwitch.Reference:
        if (props_Reference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x968b09380d4f4b45L, 0x9c47d86e2dddb74bL, 0x288f85bc880edab1L, 0x288f85bc880edab6L, "ref", "", "");
          props_Reference = cpb.create();
        }
        return props_Reference;
      case LanguageConceptSwitch.Row:
        if (props_Row == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Row");
          props_Row = cpb.create();
        }
        return props_Row;
      case LanguageConceptSwitch.Section:
        if (props_Section == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Section = cpb.create();
        }
        return props_Section;
      case LanguageConceptSwitch.Table:
        if (props_Table == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Table = cpb.create();
        }
        return props_Table;
      case LanguageConceptSwitch.TableOfContents:
        if (props_TableOfContents == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TableOfContents");
          props_TableOfContents = cpb.create();
        }
        return props_TableOfContents;
      case LanguageConceptSwitch.UsePackage:
        if (props_UsePackage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("UsePackage");
          props_UsePackage = cpb.create();
        }
        return props_UsePackage;
    }
    return null;
  }
}
