package Document.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Document;
  private ConceptPresentation props_IContentItem;
  private ConceptPresentation props_IHasSubContent;
  private ConceptPresentation props_Image;
  private ConceptPresentation props_ImageFile;
  private ConceptPresentation props_Paragraph;
  private ConceptPresentation props_Section;
  private ConceptPresentation props_TableOfContents;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Document:
        if (props_Document == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Document = cpb.create();
        }
        return props_Document;
      case LanguageConceptSwitch.IContentItem:
        if (props_IContentItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IContentItem = cpb.create();
        }
        return props_IContentItem;
      case LanguageConceptSwitch.IHasSubContent:
        if (props_IHasSubContent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IHasSubContent = cpb.create();
        }
        return props_IHasSubContent;
      case LanguageConceptSwitch.Image:
        if (props_Image == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Image = cpb.create();
        }
        return props_Image;
      case LanguageConceptSwitch.ImageFile:
        if (props_ImageFile == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ImageFile");
          props_ImageFile = cpb.create();
        }
        return props_ImageFile;
      case LanguageConceptSwitch.Paragraph:
        if (props_Paragraph == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Paragraph");
          props_Paragraph = cpb.create();
        }
        return props_Paragraph;
      case LanguageConceptSwitch.Section:
        if (props_Section == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Section = cpb.create();
        }
        return props_Section;
      case LanguageConceptSwitch.TableOfContents:
        if (props_TableOfContents == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TableOfContents");
          props_TableOfContents = cpb.create();
        }
        return props_TableOfContents;
    }
    return null;
  }
}
